name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  release:
    types: [created]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '20'
  DOCKER_BUILDKIT: 1

jobs:
  # ================== TESTING STAGE ==================
  
  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test
          
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          
      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('backend/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-asyncio black flake8 mypy
      
      - name: Run linting
        run: |
          cd backend
          black --check .
          flake8 . --max-line-length=100 --exclude=__pycache__
          # mypy . --ignore-missing-imports
      
      - name: Run tests with coverage
        env:
          MONGODB_URL: mongodb://test:test@localhost:27017/test_db?authSource=admin
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret-key
          ENVIRONMENT: test
        run: |
          cd backend
          pytest -v --cov=. --cov-report=xml --cov-report=html
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage

  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Cache npm dependencies
        uses: actions/cache@v3
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Run linting
        run: |
          cd frontend
          npm run lint
      
      - name: Type checking
        run: |
          cd frontend
          npm run type-check
      
      - name: Run tests
        run: |
          cd frontend
          npm run test:ci
      
      - name: Build application
        run: |
          cd frontend
          npm run build

  # ================== SECURITY SCANNING ==================
  
  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: 'marker-engine'
          path: '.'
          format: 'HTML'
          args: >
            --enableRetired
            --enableExperimental
      
      - name: Upload OWASP results
        uses: actions/upload-artifact@v3
        with:
          name: owasp-report
          path: reports/

  # ================== DOCKER BUILD ==================
  
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend]
    
    strategy:
      matrix:
        service: [backend, frontend, stt, worker]
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: docker/services/${{ matrix.service }}.Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ================== E2E TESTING ==================
  
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Start services with Docker Compose
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to be ready
      
      - name: Run E2E tests
        run: |
          cd tests/e2e
          npm install
          npm run test:e2e
      
      - name: Stop services
        if: always()
        run: docker-compose down

  # ================== DEPLOYMENT STAGE ==================
  
  deploy-railway:
    name: Deploy to Railway
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production-railway
      url: https://marker-engine.railway.app
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Railway CLI
        run: npm install -g @railway/cli
      
      - name: Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          railway up --service marker-engine
          railway status

  deploy-render:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production-render
      url: https://marker-engine.onrender.com
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Render
        env:
          RENDER_API_KEY: ${{ secrets.RENDER_API_KEY }}
          RENDER_SERVICE_ID: ${{ secrets.RENDER_SERVICE_ID }}
        run: |
          curl -X POST \
            -H "Authorization: Bearer $RENDER_API_KEY" \
            -H "Content-Type: application/json" \
            -d '{"serviceId": "'$RENDER_SERVICE_ID'", "clearCache": true}' \
            https://api.render.com/v1/services/$RENDER_SERVICE_ID/deploys

  deploy-fly:
    name: Deploy to Fly.io
    runs-on: ubuntu-latest
    needs: [build-docker, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production-fly
      url: https://marker-engine.fly.dev
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Fly.io
        uses: superfly/flyctl-actions/setup-flyctl@master
      
      - name: Deploy to Fly.io
        env:
          FLY_API_TOKEN: ${{ secrets.FLY_API_TOKEN }}
        run: |
          flyctl deploy --remote-only

  deploy-vercel:
    name: Deploy Frontend to Vercel
    runs-on: ubuntu-latest
    needs: test-frontend
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment:
      name: production-vercel
      url: https://marker-engine.vercel.app
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vercel
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          vercel-args: '--prod'

  # ================== SMOKE TESTS ==================
  
  smoke-tests:
    name: Smoke Tests
    runs-on: ubuntu-latest
    needs: [deploy-railway, deploy-render, deploy-fly]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        environment:
          - name: railway
            url: https://marker-engine.railway.app
          - name: render
            url: https://marker-engine.onrender.com
          - name: fly
            url: https://marker-engine.fly.dev
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Wait for deployment
        run: sleep 60
      
      - name: Health check
        run: |
          curl -f ${{ matrix.environment.url }}/health || exit 1
      
      - name: API smoke test
        run: |
          curl -f ${{ matrix.environment.url }}/api/markers || exit 1
      
      - name: Frontend smoke test
        run: |
          curl -f ${{ matrix.environment.url }} || exit 1

  # ================== NOTIFICATIONS ==================
  
  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: smoke-tests
    if: always()
    
    steps:
      - name: Send Discord notification
        if: ${{ secrets.DISCORD_WEBHOOK }}
        env:
          DISCORD_WEBHOOK: ${{ secrets.DISCORD_WEBHOOK }}
        run: |
          if [ "${{ needs.smoke-tests.result }}" == "success" ]; then
            curl -H "Content-Type: application/json" \
              -d '{"content": "✅ Marker Engine deployed successfully to production!"}' \
              $DISCORD_WEBHOOK
          else
            curl -H "Content-Type: application/json" \
              -d '{"content": "❌ Marker Engine deployment failed!"}' \
              $DISCORD_WEBHOOK
          fi
      
      - name: Create GitHub deployment
        uses: actions/github-script@v7
        with:
          script: |
            const deployment = await github.rest.repos.createDeployment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: context.sha,
              environment: 'production',
              required_contexts: [],
              auto_merge: false
            });
            
            await github.rest.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              deployment_id: deployment.data.id,
              state: '${{ needs.smoke-tests.result }}',
              environment_url: 'https://marker-engine.railway.app'
            });