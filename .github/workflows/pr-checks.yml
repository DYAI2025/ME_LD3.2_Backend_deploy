name: Pull Request Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  # ================== PR VALIDATION ==================
  
  pr-lint:
    name: PR Linting
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Validate PR title
        uses: amannn/action-semantic-pull-request@v5
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
      
      - name: Check PR size
        uses: codelytv/pr-size-labeler@v1
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          xs_label: 'size/XS'
          xs_max_size: '10'
          s_label: 'size/S'
          s_max_size: '100'
          m_label: 'size/M'
          m_max_size: '500'
          l_label: 'size/L'
          l_max_size: '1000'
          xl_label: 'size/XL'

  # ================== CODE QUALITY ==================
  
  code-quality:
    name: Code Quality Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      
      - name: Check code complexity
        run: |
          pip install radon
          radon cc backend -s -n B
          radon mi backend -s -n B

  # ================== DEPENDENCY CHECK ==================
  
  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Dependency Review
        uses: actions/dependency-review-action@v3
        with:
          fail-on-severity: moderate
          deny-licenses: GPL-3.0, AGPL-3.0
      
      - name: Check for vulnerable dependencies
        run: |
          pip install safety
          cd backend && safety check -r requirements.txt
          cd ../frontend && npm audit

  # ================== PERFORMANCE CHECK ==================
  
  lighthouse:
    name: Lighthouse Performance Check
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Build frontend
        run: |
          cd frontend
          npm ci
          npm run build
      
      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          runs: 3
          configPath: './lighthouserc.json'

  # ================== PREVIEW DEPLOYMENT ==================
  
  preview-deploy:
    name: Deploy Preview
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Deploy to Vercel Preview
        uses: amondnet/vercel-action@v25
        id: vercel-deploy
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./frontend
          alias-domains: pr-{{PR_NUMBER}}.marker-engine.vercel.app
      
      - name: Comment PR with preview URL
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `🚀 **Preview Deployment Ready!**
              
              Preview URL: ${{ steps.vercel-deploy.outputs.preview-url }}
              
              | Check | Status |
              |-------|--------|
              | 🔍 Code Quality | ✅ Passed |
              | 🔒 Security Scan | ✅ Passed |
              | 📊 Performance | ✅ Passed |
              | 🎨 Preview | ✅ Deployed |
              
              _This preview will be automatically deleted when the PR is closed._`
            })

  # ================== AUTOMATED TESTING ==================
  
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test environment
        run: |
          docker-compose -f docker-compose.test.yml up -d
          sleep 10
      
      - name: Run integration tests
        run: |
          cd tests/integration
          npm install
          npm run test
      
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-results
          path: tests/integration/results/

  # ================== PR COMMENT SUMMARY ==================
  
  pr-summary:
    name: PR Summary Comment
    runs-on: ubuntu-latest
    needs: [pr-lint, code-quality, dependency-review, lighthouse, preview-deploy, integration-tests]
    if: always()
    
    steps:
      - name: Comment PR Summary
        uses: actions/github-script@v7
        with:
          script: |
            const checks = {
              'PR Validation': '${{ needs.pr-lint.result }}',
              'Code Quality': '${{ needs.code-quality.result }}',
              'Dependencies': '${{ needs.dependency-review.result }}',
              'Performance': '${{ needs.lighthouse.result }}',
              'Preview Deploy': '${{ needs.preview-deploy.result }}',
              'Integration Tests': '${{ needs.integration-tests.result }}'
            };
            
            let allPassed = true;
            let summary = '## 📋 PR Check Summary\n\n';
            summary += '| Check | Status |\n|-------|--------|\n';
            
            for (const [check, result] of Object.entries(checks)) {
              const emoji = result === 'success' ? '✅' : '❌';
              summary += `| ${check} | ${emoji} ${result} |\n`;
              if (result !== 'success') allPassed = false;
            }
            
            summary += '\n';
            
            if (allPassed) {
              summary += '### 🎉 All checks passed! Ready for review.\n';
            } else {
              summary += '### ⚠️ Some checks failed. Please review the details above.\n';
            }
            
            summary += '\n_Last updated: ' + new Date().toUTCString() + '_';
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('PR Check Summary')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: summary
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: summary
              });
            }