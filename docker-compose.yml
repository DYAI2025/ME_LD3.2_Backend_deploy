version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: marker-engine-mongodb
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: marker-secure-password
      MONGO_INITDB_DATABASE: marker_engine
    volumes:
      - mongodb_data:/data/db
      - ./backend/scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - marker-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: marker-engine-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - marker-network

  # FastAPI Backend
  backend:
    build:
      context: ./backend
      dockerfile: ../docker/services/backend.Dockerfile
    container_name: marker-engine-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      MONGODB_URL: mongodb://admin:marker-secure-password@mongodb:27017/marker_engine?authSource=admin
      REDIS_URL: redis://redis:6379
      JWT_SECRET: your-secret-jwt-key-change-in-production
      CORS_ORIGINS: http://localhost:3000,http://localhost:3001
      ENVIRONMENT: development
    volumes:
      - ./backend:/app
      - ./data/uploads:/data/uploads
      - ./data/markers:/data/markers
    depends_on:
      - mongodb
      - redis
    networks:
      - marker-network
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload

  # STT Service (Whisper)
  stt-service:
    build:
      context: ./services
      dockerfile: ../docker/services/stt.Dockerfile
    container_name: marker-engine-stt
    restart: unless-stopped
    ports:
      - "8001:8001"
    environment:
      MODEL_SIZE: large-v3
      DEVICE: cuda  # Change to cpu if no GPU
      REDIS_URL: redis://redis:6379
    volumes:
      - ./data/audio:/data/audio
      - ./models/whisper:/models
    depends_on:
      - redis
    networks:
      - marker-network
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Spark NLP Service
  spark-nlp:
    build:
      context: ./services
      dockerfile: ../docker/services/spark-nlp.Dockerfile
    container_name: marker-engine-spark-nlp
    restart: unless-stopped
    ports:
      - "8002:8002"
    environment:
      SPARK_MEMORY: 4g
      MAX_WORKERS: 4
    volumes:
      - ./models/spark:/models
    networks:
      - marker-network
    deploy:
      resources:
        limits:
          memory: 6g

  # Next.js Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: ../docker/services/frontend.Dockerfile
      args:
        NEXT_PUBLIC_API_URL: http://localhost:8000
        NEXT_PUBLIC_WS_URL: ws://localhost:8000
    container_name: marker-engine-frontend
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    depends_on:
      - backend
    networks:
      - marker-network
    command: npm run dev

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: marker-engine-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
      - frontend
    networks:
      - marker-network
    profiles:
      - production

  # Monitoring Stack (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: marker-engine-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - marker-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: marker-engine-grafana
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_INSTALL_PLUGINS: redis-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
    depends_on:
      - prometheus
    networks:
      - marker-network
    profiles:
      - monitoring

networks:
  marker-network:
    driver: bridge

volumes:
  mongodb_data:
  redis_data:
  prometheus_data:
  grafana_data: